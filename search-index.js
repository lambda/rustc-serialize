var searchIndex = {};
searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::path","",5],[11,"encode","","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[11,"encode","collections::linked_list","",10],[11,"decode","","",10],[11,"encode","collections::vec_deque","",11],[11,"decode","","",11],[11,"encode","collections::btree::map","",12],[11,"decode","","",12],[11,"encode","collections::btree::set","",13],[11,"decode","","",13],[11,"encode","std::collections::hash::map","",14],[11,"decode","","",14],[11,"encode","std::collections::hash::set","",15],[11,"decode","","",15],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[3,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[12,"char_set","","Character set to use",16],[12,"newline","","Newline to use",16],[12,"pad","","True to pad output with `=` characters",16],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",16],[4,"CharacterSet","","Available encoding character sets"],[13,"Standard","","The standard character set (uses `+` and `/`)",17],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",17],[4,"Newline","","Available newline types"],[13,"LF","","A linefeed (i.e. Unix-style newline)",18],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",18],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",19],[13,"InvalidBase64Length","","The input had an invalid length",19],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[8,"ToBase64","","A trait for converting a value to base64 encoding."],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",20],[8,"FromBase64","","A trait for converting from base64 encoded values."],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",21],[11,"fmt","","",19],[11,"description","","",19],[11,"fmt","","",19],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[4,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",22],[13,"InvalidHexLength","","The input had an invalid length",22],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",23],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",24],[11,"fmt","","",22],[11,"description","","",22],[11,"fmt","","",22],[0,"json","rustc-serialize","JSON parsing and serialization"],[3,"PrettyJson","rustc-serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",25],[13,"U64","","",25],[13,"F64","","",25],[13,"String","","",25],[13,"Boolean","","",25],[13,"Array","","",25],[13,"Object","","",25],[13,"Null","","",25],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",26],[13,"InvalidNumber","","",26],[13,"EOFWhileParsingObject","","",26],[13,"EOFWhileParsingArray","","",26],[13,"EOFWhileParsingValue","","",26],[13,"EOFWhileParsingString","","",26],[13,"KeyMustBeAString","","",26],[13,"ExpectedColon","","",26],[13,"TrailingCharacters","","",26],[13,"TrailingComma","","",26],[13,"InvalidEscape","","",26],[13,"InvalidUnicodeCodePoint","","",26],[13,"LoneLeadingSurrogateInHexEscape","","",26],[13,"UnexpectedEndOfHexEscape","","",26],[13,"UnrecognizedHex","","",26],[13,"NotFourDigit","","",26],[13,"NotUtf8","","",26],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",27],[13,"IoError","","",27],[4,"DecoderError","",""],[13,"ParseError","","",28],[13,"ExpectedError","","",28],[13,"MissingFieldError","","",28],[13,"UnknownVariantError","","",28],[13,"ApplicationError","","",28],[13,"EOF","","",28],[4,"EncoderError","",""],[13,"FmtError","","",29],[13,"BadHashmapKey","","",29],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",30],[13,"ObjectEnd","","",30],[13,"ArrayStart","","",30],[13,"ArrayEnd","","",30],[13,"BooleanValue","","",30],[13,"I64Value","","",30],[13,"U64Value","","",30],[13,"F64Value","","",30],[13,"StringValue","","",30],[13,"NullValue","","",30],[13,"Error","","",30],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",31],[13,"Key","","",31],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",32],[11,"fmt","","",25],[11,"partial_cmp","","",25],[11,"lt","","",25],[11,"le","","",25],[11,"gt","","",25],[11,"ge","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"fmt","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",29],[11,"fmt","","",26],[11,"description","","",28],[11,"cause","","",28],[11,"fmt","","",28],[11,"description","","",27],[11,"fmt","","",27],[11,"description","","",29],[11,"fmt","","",29],[11,"from_error","","",29],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",33],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",33],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",33],[6,"Error","",""],[11,"emit_nil","","",33],[11,"emit_usize","","",33],[11,"emit_u64","","",33],[11,"emit_u32","","",33],[11,"emit_u16","","",33],[11,"emit_u8","","",33],[11,"emit_isize","","",33],[11,"emit_i64","","",33],[11,"emit_i32","","",33],[11,"emit_i16","","",33],[11,"emit_i8","","",33],[11,"emit_bool","","",33],[11,"emit_f64","","",33],[11,"emit_f32","","",33],[11,"emit_char","","",33],[11,"emit_str","","",33],[11,"emit_enum","","",33],[11,"emit_enum_variant","","",33],[11,"emit_enum_variant_arg","","",33],[11,"emit_enum_struct_variant","","",33],[11,"emit_enum_struct_variant_field","","",33],[11,"emit_struct","","",33],[11,"emit_struct_field","","",33],[11,"emit_tuple","","",33],[11,"emit_tuple_arg","","",33],[11,"emit_tuple_struct","","",33],[11,"emit_tuple_struct_arg","","",33],[11,"emit_option","","",33],[11,"emit_option_none","","",33],[11,"emit_option_some","","",33],[11,"emit_seq","","",33],[11,"emit_seq_elt","","",33],[11,"emit_map","","",33],[11,"emit_map_elt_key","","",33],[11,"emit_map_elt_val","","",33],[11,"encode","","",25],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",25],[11,"from_str","","Decodes a json value from a string",25],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",25],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",25],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",25],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",25],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",25],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",25],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",25],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",25],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",25],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",25],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",25],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",25],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",25],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",25],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",25],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",25],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",25],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",25],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",25],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",25],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",25],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",25],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",25],[6,"Output","",""],[11,"index","","",25],[6,"Output","",""],[11,"index","","",25],[11,"fmt","","",30],[11,"clone","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"fmt","","",31],[11,"clone","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"new","","",34],[11,"len","","Returns The number of elements in the Stack.",34],[11,"is_empty","","Returns true if the stack is empty.",34],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",34],[11,"is_equal_to","","Compares this stack with an array of StackElements.",34],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",34],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",34],[11,"top","","Returns the top-most element (if any).",34],[6,"Item","",""],[11,"next","","",35],[11,"new","","Creates the JSON parser.",35],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",35],[11,"new","","Create a JSON Builder.",36],[11,"build","","",36],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",37],[6,"Error","",""],[11,"read_nil","","",37],[11,"read_usize","","",37],[11,"read_u8","","",37],[11,"read_u16","","",37],[11,"read_u32","","",37],[11,"read_u64","","",37],[11,"read_isize","","",37],[11,"read_i8","","",37],[11,"read_i16","","",37],[11,"read_i32","","",37],[11,"read_i64","","",37],[11,"read_f32","","",37],[11,"read_f64","","",37],[11,"read_bool","","",37],[11,"read_char","","",37],[11,"read_str","","",37],[11,"read_enum","","",37],[11,"read_enum_variant","","",37],[11,"read_enum_variant_arg","","",37],[11,"read_enum_struct_variant","","",37],[11,"read_enum_struct_variant_field","","",37],[11,"read_struct","","",37],[11,"read_struct_field","","",37],[11,"read_tuple","","",37],[11,"read_tuple_arg","","",37],[11,"read_tuple_struct","","",37],[11,"read_tuple_struct_arg","","",37],[11,"read_option","","",37],[11,"read_seq","","",37],[11,"read_seq_elt","","",37],[11,"read_map","","",37],[11,"read_map_elt_key","","",37],[11,"read_map_elt_val","","",37],[11,"error","","",37],[11,"to_json","","",25],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",12],[11,"to_json","std::collections::hash::map","",14],[11,"to_json","core::option","",4],[11,"fmt","rustc-serialize::json","Encodes a json value into a string",25],[11,"fmt","","Encodes a json value into a string",38],[11,"fmt","","Encodes a json value into a string",39],[11,"indent","","Set the indentation level for the emitted JSON",40],[11,"fmt","","Encodes a json value into a string",40],[6,"Err","",""],[11,"from_str","","",25],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::path","",5],[11,"encode","","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[8,"Decoder","rustc-serialize",""],[16,"Error","rustc-serialize::Decoder",""],[10,"read_nil","rustc-serialize","",41],[10,"read_usize","","",41],[10,"read_u64","","",41],[10,"read_u32","","",41],[10,"read_u16","","",41],[10,"read_u8","","",41],[10,"read_isize","","",41],[10,"read_i64","","",41],[10,"read_i32","","",41],[10,"read_i16","","",41],[10,"read_i8","","",41],[10,"read_bool","","",41],[10,"read_f64","","",41],[10,"read_f32","","",41],[10,"read_char","","",41],[10,"read_str","","",41],[10,"read_enum","","",41],[10,"read_enum_variant","","",41],[10,"read_enum_variant_arg","","",41],[10,"read_enum_struct_variant","","",41],[10,"read_enum_struct_variant_field","","",41],[10,"read_struct","","",41],[10,"read_struct_field","","",41],[10,"read_tuple","","",41],[10,"read_tuple_arg","","",41],[10,"read_tuple_struct","","",41],[10,"read_tuple_struct_arg","","",41],[10,"read_option","","",41],[10,"read_seq","","",41],[10,"read_seq_elt","","",41],[10,"read_map","","",41],[10,"read_map_elt_key","","",41],[10,"read_map_elt_val","","",41],[10,"error","","",41],[8,"Encoder","",""],[16,"Error","rustc-serialize::Encoder",""],[10,"emit_nil","rustc-serialize","",42],[10,"emit_usize","","",42],[10,"emit_u64","","",42],[10,"emit_u32","","",42],[10,"emit_u16","","",42],[10,"emit_u8","","",42],[10,"emit_isize","","",42],[10,"emit_i64","","",42],[10,"emit_i32","","",42],[10,"emit_i16","","",42],[10,"emit_i8","","",42],[10,"emit_bool","","",42],[10,"emit_f64","","",42],[10,"emit_f32","","",42],[10,"emit_char","","",42],[10,"emit_str","","",42],[10,"emit_enum","","",42],[10,"emit_enum_variant","","",42],[10,"emit_enum_variant_arg","","",42],[10,"emit_enum_struct_variant","","",42],[10,"emit_enum_struct_variant_field","","",42],[10,"emit_struct","","",42],[10,"emit_struct_field","","",42],[10,"emit_tuple","","",42],[10,"emit_tuple_arg","","",42],[10,"emit_tuple_struct","","",42],[10,"emit_tuple_struct_arg","","",42],[10,"emit_option","","",42],[10,"emit_option_none","","",42],[10,"emit_option_some","","",42],[10,"emit_seq","","",42],[10,"emit_seq_elt","","",42],[10,"emit_map","","",42],[10,"emit_map_elt_key","","",42],[10,"emit_map_elt_val","","",42],[8,"Decodable","",""],[10,"decode","","",43],[8,"Encodable","",""],[10,"encode","","",44],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",45],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",46]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
initSearch(searchIndex);
